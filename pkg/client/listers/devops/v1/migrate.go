/*
Copyright The Symphony Authors.

*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/yangyongzhi/sym-operator/pkg/apis/devops/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MigrateLister helps list Migrates.
type MigrateLister interface {
	// List lists all Migrates in the indexer.
	List(selector labels.Selector) (ret []*v1.Migrate, err error)
	// Migrates returns an object that can list and get Migrates.
	Migrates(namespace string) MigrateNamespaceLister
	MigrateListerExpansion
}

// migrateLister implements the MigrateLister interface.
type migrateLister struct {
	indexer cache.Indexer
}

// NewMigrateLister returns a new MigrateLister.
func NewMigrateLister(indexer cache.Indexer) MigrateLister {
	return &migrateLister{indexer: indexer}
}

// List lists all Migrates in the indexer.
func (s *migrateLister) List(selector labels.Selector) (ret []*v1.Migrate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Migrate))
	})
	return ret, err
}

// Migrates returns an object that can list and get Migrates.
func (s *migrateLister) Migrates(namespace string) MigrateNamespaceLister {
	return migrateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MigrateNamespaceLister helps list and get Migrates.
type MigrateNamespaceLister interface {
	// List lists all Migrates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Migrate, err error)
	// Get retrieves the Migrate from the indexer for a given namespace and name.
	Get(name string) (*v1.Migrate, error)
	MigrateNamespaceListerExpansion
}

// migrateNamespaceLister implements the MigrateNamespaceLister
// interface.
type migrateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Migrates in the indexer for a given namespace.
func (s migrateNamespaceLister) List(selector labels.Selector) (ret []*v1.Migrate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Migrate))
	})
	return ret, err
}

// Get retrieves the Migrate from the indexer for a given namespace and name.
func (s migrateNamespaceLister) Get(name string) (*v1.Migrate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("migrate"), name)
	}
	return obj.(*v1.Migrate), nil
}
